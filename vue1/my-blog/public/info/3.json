{
    "title": "ES6之promise源码分享",
    "date": "2020-2-27 16:11",
    "id": 3,
    "author": "黄力豪",
    "connect": [
        "class MyPromise {\n        PENDING = 'pending'\n        FULFILLED = 'fulfilled'\n        REJECT = 'reject'\n        constructor(fn) {\n    \n            if (typeof fn !== 'function') {\n                throw new TypeError(`Promise resolver ${fn} is not a function`)\n            }\n            this.initValue()\n            this.Reslovecallback = []\n            this.Rejectcallback = []\n            try { fn(this.reslove.bind(this), this.reject.bind(this)) }\n            catch (e) {\n                this.reject(e)\n            }\n        }\n        initValue() {\n            this.state = this.PENDING\n            this.value = null\n            this.reason = null\n        }\n        reslove(value) {\n    \n    \n            if (this.state == this.PENDING) {\n                this.state = this.FULFILLED\n    \n                this.value = value\n                this.Reslovecallback.forEach(fn => { fn(this.value) })\n            }\n        }\n        reject(reason) {\n            if (this.state == this.PENDING) {\n                this.state = this.REJECT\n                this.reason = reason\n                this.Rejectcallback.forEach(fn => { fn(this.reason) })\n            }\n        }\n        then(onReslove, onReject) {\n            if (typeof onReslove !== 'function') {\n    \n                onReslove = function (value) {\n                    return value\n                }\n            }\n            if (typeof onReject !== 'function') {\n                onReject = function (error) {\n                    throw (error)\n                }\n            }\n            let promise2 = new MyPromise((reslove, reject) => {\n                if (this.state === this.REJECT) {\n                    setTimeout(() => {\n                        try {\n                            const x = onReject(this.reason)\n                            MyPromise.reslovePromise(promise2, x, reslove, reject)\n                        }\n                        catch (e) {\n                            reject(e)\n                        }\n                    });\n                }\n                if (this.state === this.FULFILLED) {\n                    setTimeout(() => {\n                        try {\n                            const x = onReslove(this.value)\n                            MyPromise.reslovePromise(promise2, x, reslove, reject)\n                        }\n                        catch (e) {\n                            reject(e)\n                        }\n                    });\n                }\n                if (this.state = this.PENDING) {\n                    this.Reslovecallback.push((value) => {\n                        setTimeout(() => {\n                            try {\n                                const x = onReslove(value)\n                                MyPromise.reslovePromise(promise2, x, reslove, reject)\n    \n    \n                            }\n                            catch (e) {\n                                reject(e)\n                            }\n                        }\n                        )\n                    })\n                    this.Rejectcallback.push(reason => {\n                        setTimeout(() => {\n                            try {\n                                const x = onReject(reason)\n                                MyPromise.reslovePromise(promise2, x, reslove, reject)\n                            } catch (e) {\n                                reject(e)\n                            }\n                        })\n                    })\n                }\n    \n            })\n            return promise2\n        }\n    }\n    MyPromise.reslovePromise = function (promise2, x, reslove, reject) {\n    \n        if (promise2 === x) {\n            throw new TypeError(\n                ' cycle promise'\n            )\n        }\n        if (x instanceof MyPromise) {\n            x.then(value => {\n                MyPromise.reslovePromise(promise2, value, reslove, reject)\n            }, reason => {\n                reject(reason)\n            })\n        }\n        else if (x !== null && (typeof x === 'object' || typeof x === 'function')) {\n           \n            try {\n                if (typeof x.then === 'function') {\n                    x.then(value => {\n                        MyPromise.reslovePromise(promise2, value, reslove, reject)\n                    }, reason => {\n                        reject(reason)\n                    })\n                }\n            }\n            catch (e) {\n                reject(e)\n            }\n        }\n        else {\n            reslove(x)\n        }\n    \n    }\n    let p = new MyPromise((reslove, reject) => {\n        setTimeout(() => {\n            reslove(1)\n            reject(2)\n        }, 300)\n    })\n    p.then(res => {\n        return new MyPromise(reslove => {\n            setTimeout(() => {\n                console.log(res);\n                reslove(5)\n            }, 500)\n        })\n    }, error => {\n        console.log(3);\n    \n    })\n        .then(res => {\n            return new Promise(reslove => {\n                setTimeout(() => {\n                    console.log(res);\n                    reslove(8)\n    \n                }, 200);\n            })\n        }).then(\n            res => {\n                return new Promise(reslove => {\n                    setTimeout(() => {\n                        console.log(res);\n                        reslove(10)\n        \n                    }, 200);\n                })\n            }\n        ).then(res=>{\n            console.log(res);\n            \n        })\n    \n    "
    ],
    "imgs": []
}